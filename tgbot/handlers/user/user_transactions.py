# - *- coding: utf- 8 - *-
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from tgbot.data.config import *
from tgbot.data.loader import dp
from tgbot.keyboards.inline_user import refill_bill_finl, refill_select_finl
from tgbot.services.api_qiwi import QiwiAPI
from tgbot.services.api_sqlite import update_userx, get_refillx, add_refillx, get_userx
from tgbot.utils.const_functions import get_date, get_unix
from tgbot.utils.crystalpay_sdk import CrystalPAY
from tgbot.utils.misc_functions import send_admins

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö
min_input_qiwi = 5
min_input_crystal = 5


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(text="user_refill", state="*")
async def refill_way(call: CallbackQuery, state: FSMContext):
    get_kb = refill_select_finl()

    if get_kb is not None:
        await call.message.edit_text("<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", reply_markup=get_kb)
    else:
        await call.answer("‚õî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", True)


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(text_startswith="refill_select", state="*")
async def refill_way_select(call: CallbackQuery, state: FSMContext):
    get_way = call.data.split(":")[1]
    await state.update_data(here_pay_way=get_way)
    if get_way == 'Crystal':
        print('crystal')
        await state.set_state("here_refill_amount_crystal")
        await call.message.edit_text("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>")
    else:
        await state.set_state("here_refill_amount")
        await call.message.edit_text("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>")


###################################################################################
#################################### –í–í–û–î –°–£–ú–ú–´ ###################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ QIWI
@dp.message_handler(state="here_refill_amount")
async def refill_get(message: Message, state: FSMContext):
    if message.text.isdigit():
        cache_message = await message.answer("<b>‚ôª –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–ª–∞—Ç—ë–∂ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>")
        pay_amount = int(message.text)

        if min_input_qiwi <= pay_amount <= 300000:
            get_way = (await state.get_data())['here_pay_way']
            await state.finish()

            get_message, get_link, receipt = await (
                QiwiAPI(cache_message, pass_user=True)
            ).bill(pay_amount, get_way)

            if get_message:
                await cache_message.edit_text(get_message, reply_markup=refill_bill_finl(get_link, receipt, get_way))
        else:
            await cache_message.edit_text(
                f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n"
                f"‚ñ∂ C—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ <code>{min_input_qiwi}‚ÇΩ</code> –∏ –±–æ–ª—å—à–µ <code>300 000‚ÇΩ</code>\n"
                f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤",
            )
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤")


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ CrystalPAY
@dp.message_handler(state="here_refill_amount_crystal")
async def create_crystal_pay(message: Message, state: FSMContext, del_msg=None):
    if message.text.isdigit() and int(message.text) >= 0:
        get_way = (await state.get_data())['here_pay_way']
        crystal = CrystalPAY(crystal_name, crystal_secret)
        link = crystal.Invoice.create(amount=int(message.text), currency="RUB", description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                                      type_="purchase", lifetime=120, redirect_url=redirect_url.format())
        await message.answer("üéà –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:\n"
                             f"‚úî ID –ø–ª–∞—Ç–µ–∂–∞: {link['id']}\n"
                             f"üìé –°—Å—ã–ª–∫–∞: <a href='{link['url']}'>–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞</a>",
                             reply_markup=refill_bill_finl(link['url'], link['id'], get_way))
        await state.finish()
    else:
        await message.answer(f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n"
                             f"‚ñ∂ –ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{min_input_crystal}—Ä—É–±</code>\n"
                             f"üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ üíé")


###################################################################################
################################ –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô ################################
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
@dp.callback_query_handler(text_startswith="Pay:Form")
async def refill_check_form(call: CallbackQuery):
    receipt = call.data.split(":")[2]

    pay_status, pay_amount = await (
        QiwiAPI(call, pass_user=True)
    ).check_form(receipt)

    if pay_status == "PAID":
        get_refill = get_refillx(refill_receipt=receipt)
        if get_refill is None:
            await refill_success(call, receipt, pay_amount, "Form")
        else:
            await call.answer("‚ùó –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ.", True)
    elif pay_status == "EXPIRED":
        await call.message.edit_text("<b>‚ùå –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –≤—ã—à–ª–æ. –ü–ª–∞—Ç—ë–∂ –±—ã–ª —É–¥–∞–ª—ë–Ω.</b>")
    elif pay_status == "WAITING":
        await call.answer("‚ùó –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.\n"
                          "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.", True, cache_time=5)
    elif pay_status == "REJECTED":
        await call.message.edit_text("<b>‚ùå –°—á—ë—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.</b>")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É (–ø–æ –Ω–∏–∫—É –∏–ª–∏ –Ω–æ–º–µ—Ä—É)
@dp.callback_query_handler(text_startswith=['Pay:Number', 'Pay:Nickname'])
async def refill_check_send(call: CallbackQuery):
    way_pay = call.data.split(":")[1]
    receipt = call.data.split(":")[2]

    pay_status, pay_amount = await (
        QiwiAPI(call, pass_user=True)
    ).check_send(receipt)

    if pay_status == 1:
        await call.answer("‚ùó –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–µ –≤ —Ä—É–±–ª—è—Ö.", True, cache_time=5)
    elif pay_status == 2:
        await call.answer("‚ùó –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.\n"
                          "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.", True, cache_time=5)
    elif pay_status == 4:
        pass
    else:
        get_refill = get_refillx(refill_receipt=receipt)
        if get_refill is None:
            await refill_success(call, receipt, pay_amount, way_pay)
        else:
            await call.answer("‚ùó –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ.", True, cache_time=60)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Crystal Pay
@dp.callback_query_handler(text_startswith="Pay:Crystal")
async def refill_check_crystal(call: CallbackQuery):
    print("Check")
    call_data = call.data.split(":")
    receipt = call_data[2]
    way_pay = call_data[1]
    crystal = CrystalPAY(crystal_name, crystal_secret)
    status = crystal.Invoice.getinfo(receipt)
    pay_amount = status['pay_amount']
    pay_status = status['state']
    get_user_info = get_userx(user_id=call.from_user.id)
    print("Pay amount")
    if pay_status == "payed":
        await refill_success(call, receipt, pay_amount, way_pay)
        await call.message.edit_text(
            f"<b>üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É <code>{pay_amount}‚ÇΩ</code>. –£–¥–∞—á–∏ ‚ù§\n"
            f"üßæ –ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: <code>{receipt}</code>\n"
            f"üì± –ü—Ä–æ—Ñ–∏–ª—å: <a href='tg://user?id={call.from_user.id}'>{get_user_info['user_name']}</a></b>",
            reply_markup=None,
        )
    else:
        await call.message.edit_text(
            f"<b>‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –ø—Ä–æ–≤–µ–¥—ë–Ω</b>\n"
            f"üßæ –ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞: <code>{receipt}</code>\n"
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤",
            reply_markup=None,
        )


##########################################################################################
######################################### –ü–†–û–ß–ï–ï #########################################
##########################################################################################
# –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
async def refill_success(call: CallbackQuery, receipt, amount, get_way):
    get_user = get_userx(user_id=call.from_user.id)

    add_refillx(get_user['user_id'], get_user['user_login'], get_user['user_name'], receipt,
                amount, receipt, get_way, get_date(), get_unix())

    update_userx(
        call.from_user.id,
        user_balance=get_user['user_balance'] + amount,
        user_refill=get_user['user_refill'] + amount,
    )

    await call.message.edit_text(
        f"<b>üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É <code>{amount}‚ÇΩ</code>. –£–¥–∞—á–∏ ‚ù§\n"
        f"üßæ –ß–µ–∫: <code>#{receipt}</code></b>",
    )

    await send_admins(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{get_user['user_login']}</b> | <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> | <code>{get_user['user_id']}</code>\n"
        f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{amount}‚ÇΩ</code>\n"
        f"üßæ –ß–µ–∫: <code>#{receipt}</code>\n"
        f"üí≥ –°–ø–æ—Å–æ–±: <code>{get_way}"
    )
